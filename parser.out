Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BIGGER
    BIGGEREQ
    BOOLEAN
    DO
    ELIF
    ELSE
    EQC
    EXP
    FALSE
    FLOAT
    FOR
    IF
    INT
    LKEY
    NOTEQC
    OR
    RKEY
    SMALLER
    SMALLEREQ
    STRING
    STRINGV
    TRUE
    WHILE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> ID EQ expression
Rule 2     statement -> expression
Rule 3     expression -> expression PLUS expression
Rule 4     expression -> expression MINUS expression
Rule 5     expression -> expression TIMES expression
Rule 6     expression -> expression DIVIDE expression
Rule 7     expression -> LPAREN expression RPAREN
Rule 8     expression -> INTV
Rule 9     expression -> FLOATV
Rule 10    expression -> ID

Terminals, with rules where they appear

AND                  : 
BIGGER               : 
BIGGEREQ             : 
BOOLEAN              : 
DIVIDE               : 6
DO                   : 
ELIF                 : 
ELSE                 : 
EQ                   : 1
EQC                  : 
EXP                  : 
FALSE                : 
FLOAT                : 
FLOATV               : 9
FOR                  : 
ID                   : 1 10
IF                   : 
INT                  : 
INTV                 : 8
LKEY                 : 
LPAREN               : 7
MINUS                : 4
NOTEQC               : 
OR                   : 
PLUS                 : 3
RKEY                 : 
RPAREN               : 7
SMALLER              : 
SMALLEREQ            : 
STRING               : 
STRINGV              : 
TIMES                : 5
TRUE                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 3 4 4 5 5 6 6 7
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . ID EQ expression
    (2) statement -> . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INTV
    (9) expression -> . FLOATV
    (10) expression -> . ID

    ID              shift and go to state 2
    LPAREN          shift and go to state 4
    INTV            shift and go to state 5
    FLOATV          shift and go to state 6

    statement                      shift and go to state 1
    expression                     shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> ID . EQ expression
    (10) expression -> ID .

    EQ              shift and go to state 7
    PLUS            reduce using rule 10 (expression -> ID .)
    MINUS           reduce using rule 10 (expression -> ID .)
    TIMES           reduce using rule 10 (expression -> ID .)
    DIVIDE          reduce using rule 10 (expression -> ID .)
    $end            reduce using rule 10 (expression -> ID .)


state 3

    (2) statement -> expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    $end            reduce using rule 2 (statement -> expression .)
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 4

    (7) expression -> LPAREN . expression RPAREN
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INTV
    (9) expression -> . FLOATV
    (10) expression -> . ID

    LPAREN          shift and go to state 4
    INTV            shift and go to state 5
    FLOATV          shift and go to state 6
    ID              shift and go to state 13

    expression                     shift and go to state 12

state 5

    (8) expression -> INTV .

    PLUS            reduce using rule 8 (expression -> INTV .)
    MINUS           reduce using rule 8 (expression -> INTV .)
    TIMES           reduce using rule 8 (expression -> INTV .)
    DIVIDE          reduce using rule 8 (expression -> INTV .)
    $end            reduce using rule 8 (expression -> INTV .)
    RPAREN          reduce using rule 8 (expression -> INTV .)


state 6

    (9) expression -> FLOATV .

    PLUS            reduce using rule 9 (expression -> FLOATV .)
    MINUS           reduce using rule 9 (expression -> FLOATV .)
    TIMES           reduce using rule 9 (expression -> FLOATV .)
    DIVIDE          reduce using rule 9 (expression -> FLOATV .)
    $end            reduce using rule 9 (expression -> FLOATV .)
    RPAREN          reduce using rule 9 (expression -> FLOATV .)


state 7

    (1) statement -> ID EQ . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INTV
    (9) expression -> . FLOATV
    (10) expression -> . ID

    LPAREN          shift and go to state 4
    INTV            shift and go to state 5
    FLOATV          shift and go to state 6
    ID              shift and go to state 13

    expression                     shift and go to state 14

state 8

    (3) expression -> expression PLUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INTV
    (9) expression -> . FLOATV
    (10) expression -> . ID

    LPAREN          shift and go to state 4
    INTV            shift and go to state 5
    FLOATV          shift and go to state 6
    ID              shift and go to state 13

    expression                     shift and go to state 15

state 9

    (4) expression -> expression MINUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INTV
    (9) expression -> . FLOATV
    (10) expression -> . ID

    LPAREN          shift and go to state 4
    INTV            shift and go to state 5
    FLOATV          shift and go to state 6
    ID              shift and go to state 13

    expression                     shift and go to state 16

state 10

    (5) expression -> expression TIMES . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INTV
    (9) expression -> . FLOATV
    (10) expression -> . ID

    LPAREN          shift and go to state 4
    INTV            shift and go to state 5
    FLOATV          shift and go to state 6
    ID              shift and go to state 13

    expression                     shift and go to state 17

state 11

    (6) expression -> expression DIVIDE . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . INTV
    (9) expression -> . FLOATV
    (10) expression -> . ID

    LPAREN          shift and go to state 4
    INTV            shift and go to state 5
    FLOATV          shift and go to state 6
    ID              shift and go to state 13

    expression                     shift and go to state 18

state 12

    (7) expression -> LPAREN expression . RPAREN
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 19
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 13

    (10) expression -> ID .

    RPAREN          reduce using rule 10 (expression -> ID .)
    PLUS            reduce using rule 10 (expression -> ID .)
    MINUS           reduce using rule 10 (expression -> ID .)
    TIMES           reduce using rule 10 (expression -> ID .)
    DIVIDE          reduce using rule 10 (expression -> ID .)
    $end            reduce using rule 10 (expression -> ID .)


state 14

    (1) statement -> ID EQ expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> ID EQ expression .)
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 15

    (3) expression -> expression PLUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 3 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 3 (expression -> expression PLUS expression .)
    $end            reduce using rule 3 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 3 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11

  ! TIMES           [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 16

    (4) expression -> expression MINUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 4 (expression -> expression MINUS expression .)
    $end            reduce using rule 4 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 4 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11

  ! TIMES           [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 17

    (5) expression -> expression TIMES expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 5 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 5 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 5 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 5 (expression -> expression TIMES expression .)
    $end            reduce using rule 5 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 5 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]
  ! TIMES           [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]


state 18

    (6) expression -> expression DIVIDE expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 6 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 6 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 6 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 6 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 6 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]
  ! TIMES           [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]


state 19

    (7) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 7 (expression -> LPAREN expression RPAREN .)

