
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEAND BIGGER BIGGEREQ BOOLEAN DIVIDE DO ELIF ELSE EQ EQC EXP FALSE FLOAT FLOATV FOR ID IF INT INTV LKEY LPAREN MINUS NOTEQC OR PLUS RKEY RPAREN SMALLER SMALLEREQ STRING STRINGV TIMES TRUE WHILEstatement : ID EQ expressionstatement : expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : INTVexpression : FLOATVexpression : ID'
    
_lr_action_items = {'ID':([0,4,7,8,9,10,11,],[2,13,13,13,13,13,13,]),'LPAREN':([0,4,7,8,9,10,11,],[4,4,4,4,4,4,4,]),'INTV':([0,4,7,8,9,10,11,],[5,5,5,5,5,5,5,]),'FLOATV':([0,4,7,8,9,10,11,],[6,6,6,6,6,6,6,]),'$end':([1,2,3,5,6,13,14,15,16,17,18,19,],[0,-10,-2,-8,-9,-10,-1,-3,-4,-5,-6,-7,]),'EQ':([2,],[7,]),'PLUS':([2,3,5,6,12,13,14,15,16,17,18,19,],[-10,8,-8,-9,8,-10,8,-3,-4,-5,-6,-7,]),'MINUS':([2,3,5,6,12,13,14,15,16,17,18,19,],[-10,9,-8,-9,9,-10,9,-3,-4,-5,-6,-7,]),'TIMES':([2,3,5,6,12,13,14,15,16,17,18,19,],[-10,10,-8,-9,10,-10,10,10,10,-5,-6,-7,]),'DIVIDE':([2,3,5,6,12,13,14,15,16,17,18,19,],[-10,11,-8,-9,11,-10,11,11,11,-5,-6,-7,]),'RPAREN':([5,6,12,13,15,16,17,18,19,],[-8,-9,19,-10,-3,-4,-5,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,7,8,9,10,11,],[3,12,14,15,16,17,18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> ID EQ expression','statement',3,'p_statement_assign','compiler.py',103),
  ('statement -> expression','statement',1,'p_statement_expr','compiler.py',107),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','compiler.py',111),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','compiler.py',112),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','compiler.py',113),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','compiler.py',114),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','compiler.py',121),
  ('expression -> INTV','expression',1,'p_expression_intv','compiler.py',125),
  ('expression -> FLOATV','expression',1,'p_expression_floatv','compiler.py',129),
  ('expression -> ID','expression',1,'p_expression_id','compiler.py',133),
]
